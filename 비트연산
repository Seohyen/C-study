논리 연산시 하나만 사용하면 비트연산이 된다. 
Console.WriteLine($"a & b : {a&b}");
int a = 40
int b = 14

### & AND
a&b 
이진수로 표현했을 시 
//a = 00101000
//b = 00001110
->& = 00001000 즉 8이 된다. 

### | OR
마찬가지로 OR연산자도 가능하다 

Console.WriteLine($"a | b : {a|b}");
//a = 00101000
//b = 00001110
->| = 00101110 즉 46이 된다. 

### ^ XOR
Console.WriteLine($"a ^ b : {a^b}");
서로 다를 때 1이 된다. 
//a = 00101000
//b = 00001110
-> ^= 00100110 즉 38이 된다. 

### ~ NOT
Console.WriteLine($"~a : {~a}");
//a = 00101000
//x = 11010111 (맨 앞자리 1 음수) 
0인경우 1 , 1인 경우 0으로 전환한다. (반전) 
2의 보수를 출력하기에 -41이 출력된다. 


### << SHIFT
숫자만큼 비트를 민다. 
Console.WriteLine($"a<<2 : {a<<2}");
//a = 00101000
//a' = 10100000 왼쪽으로 두칸 밀음, 즉 160이 출력된다.

Console.WriteLine($"a>>2 : {a>>2}");
//a = 00101000
//a' = 00001010 오른쪽으로 두칸 밀음, 즉 10이 출력된다. 


ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ
WHY? 컴퓨터는 이진수로 되어있기 때문이다. 
0.1 * 3 을 했을 때 0.3이 바로 안나오는 등 10진수의 연산이 아니다. 


